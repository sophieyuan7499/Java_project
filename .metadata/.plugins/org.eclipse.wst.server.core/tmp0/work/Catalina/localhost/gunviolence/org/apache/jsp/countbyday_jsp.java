/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.50
 * Generated at: 2020-04-02 02:56:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class countbyday_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/echarts.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery-1.11.0.min.js\"></script>\r\n");
      out.write("<title>日统计</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<button id=\"btn\">查询 </button>\r\n");
      out.write("<div id=\"main\" style=\"width: 900px;height:500px;\"></div>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(function(){\r\n");
      out.write("\tvar charts1 = echarts.init(document.getElementById('main'))\r\n");
      out.write("\toption = {\r\n");
      out.write("\t\t\t    xAxis: {\r\n");
      out.write("\t\t\t        type: 'category',\r\n");
      out.write("\t\t\t        boundaryGap: false,\r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    yAxis: {\r\n");
      out.write("\t\t\t        type: 'value',\r\n");
      out.write("\t\t\t        boundaryGap: [0, '30%']\r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    dataZoom:[{\r\n");
      out.write("\t\t\t    \ttype: 'slider',//图表下方的伸缩条\r\n");
      out.write("\t\t\t    \tshow : true, //是否显示\r\n");
      out.write("\t\t\t    \trealtime : true, //拖动时，是否实时更新系列的视图\r\n");
      out.write("\t\t\t\t\t}],\r\n");
      out.write("\t\t\t    visualMap: {\r\n");
      out.write("\t\t\t        type: 'piecewise',\r\n");
      out.write("\t\t\t        show: false,\r\n");
      out.write("\t\t\t        dimension: 0,\r\n");
      out.write("\t\t\t        seriesIndex: 0,\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    tooltip:{\r\n");
      out.write("\t\t\t\t\ttrigger:'axis',\r\n");
      out.write("\t\t\t\t\tformatter:function(params){\r\n");
      out.write("\t\t\t\t\t\tconsole.log(params[0]);\r\n");
      out.write("\t\t\t\t\t\t for(x in params){\r\n");
      out.write("\t\t\t\t\t\t\t return params[x].name +\"：\"+params[x].data[1]\r\n");
      out.write("\t\t\t\t\t\t }\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t    series: [\r\n");
      out.write("\t\t\t        {\r\n");
      out.write("\t\t\t            type: 'line',\r\n");
      out.write("\t\t\t            smooth: 0.6,\r\n");
      out.write("\t\t\t            symbol: 'none',\r\n");
      out.write("\t\t\t            lineStyle: {\r\n");
      out.write("\t\t\t                color: '#A52A2A',\r\n");
      out.write("\t\t\t                width: 5\r\n");
      out.write("\t\t\t            },\r\n");
      out.write("\t\t\t            \r\n");
      out.write("\t\t\t            areaStyle: {},\r\n");
      out.write("\t\t\t            data: [ ]\r\n");
      out.write("\t\t\t        }\r\n");
      out.write("\t\t\t    ]\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\tcharts1.setOption(option);\r\n");
      out.write("\t\r\n");
      out.write("\tvar datas=[];\r\n");
      out.write("\t$(\"#btn\").click(function(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$.ajax({\t\r\n");
      out.write("\t\t\ttype:\"post\",\r\n");
      out.write("\t\t\turl:\"countbyday\",\r\n");
      out.write("\t\t\tasync:false,\r\n");
      out.write("\t\t\tsuccess:function(data){   //data为一个字符串\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//对数据进行处理\r\n");
      out.write("\t\t\t\t//将其转化为对象\r\n");
      out.write("\t\t\t\tvar arr = eval(\"(\"+data+\")\");\r\n");
      out.write("\t\t\t$.each(arr,function(countByDay,item){\r\n");
      out.write("\t\t\t\tvar day = item.date;\r\n");
      out.write("\t\t\t\tvar num = item.num;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tdatas.push([\r\n");
      out.write("\t\t\t\t\tday, num\r\n");
      out.write("]);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}); //循环遍历\r\n");
      out.write("\t\t\tcharts1.setOption({ series:[ {data :datas } ]});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
