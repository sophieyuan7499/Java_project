package mapreduce;

import java.io.IOException;
import java.util.Iterator;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

 class WordcountMapper extends Mapper<LongWritable, Text, Text, IntWritable> {
    /**
     * map阶段的业务逻辑就写在自定义的map()方法中 maptask会对每一行输入数据调用一次我们自定义的map()方法
     */
    @Override
    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        // 将maptask传给我们的文本内容先转换成String
        String line = value.toString();
        // 根据空格将这一行切分成单词
        String[] words = line.split("||");

        // 将单词输出为<单词，1>
        for (String word : words) {
            // 将单词作为key，将次数1作为value，以便于后续的数据分发，可以根据单词分发，以便于相同单词会到相同的reduce task
            context.write(new Text(word), new IntWritable(1));
        }
    }

}

 class WordcountReducer extends Reducer<Text, IntWritable, Text, IntWritable>{
	    /**
	     * <angelababy,1><angelababy,1><angelababy,1><angelababy,1><angelababy,1>
	     * <hello,1><hello,1><hello,1><hello,1><hello,1><hello,1>
	     * <banana,1><banana,1><banana,1><banana,1><banana,1><banana,1>
	     * 入参key，是一组相同单词kv对的key
	     */
	    @Override
	    protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
	        int count=0;
	        for(IntWritable value : values){
	            count += value.get();
	        }

	        context.write(key, new IntWritable(count));     //输出每一个单词出现的次数
	    }

	}
 
 public class WordcountDriver {

	    public static void main(String[] args) throws Exception {
	        System.setProperty("hadoop.home.dir", "e:/hadoop-2.8.3");
	        if (args == null || args.length == 0) {
	            return;
	        }

	        //该对象会默认读取环境中的 hadoop 配置。当然，也可以通过 set 重新进行配置
	        Configuration conf = new Configuration();

	        //job 是 yarn 中任务的抽象。
	        Job job = Job.getInstance(conf);

	        /*job.setJar("/home/hadoop/wc.jar");*/
	        //指定本程序的jar包所在的本地路径
	        job.setJarByClass(WordcountDriver.class);

	        //指定本业务job要使用的mapper/Reducer业务类
	        job.setMapperClass(WordcountMapper.class);
	        job.setReducerClass(WordcountReducer.class);

	        //指定mapper输出数据的kv类型。需要和 Mapper 中泛型的类型保持一致
	        job.setMapOutputKeyClass(Text.class);
	        job.setMapOutputValueClass(IntWritable.class);

	        //指定最终输出的数据的kv类型。这里也是 Reduce 的 key，value类型。
	        job.setOutputKeyClass(Text.class);
	        job.setOutputValueClass(IntWritable.class);

	        //指定job的输入原始文件所在目录
	        FileInputFormat.setInputPaths(job, new Path(args[0]));
	        //指定job的输出结果所在目录
	        FileOutputFormat.setOutputPath(job, new Path(args[1]));

	        //将job中配置的相关参数，以及job所用的java类所在的jar包，提交给yarn去运行
	        /*job.submit();*/
	        boolean res = job.waitForCompletion(true);
	        System.exit(res?0:1);
	    }
	}